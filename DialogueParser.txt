//Passador de dialogos
using UnityEngine; 
using System.Collections; 
using UnityEditor; 
using System.Text; 
using System.IO; 
using System.Text.RegularExpressions; 
using System.Collections.Generic; 
//Bibliotecas que facilitam o uso de texto
 
public class DialogueParser : MonoBehaviour { 
 
    struct DialogueLine { //Cria a estrutura para passar os dialogos;
        public string name; // nome do personagem; 
        public string content; //fala;
        public int pose; //pose do personagem; 
        public string position;  //posicao na tela
        public string[] options; 
 
        public DialogueLine(string Name, string Content, int Pose, string Position) { //cria uma função para pegar dados que se encaixam nesta extrutura;
            name = Name; 
            content = Content; 
            pose = Pose; 
            position = Position; 
            options = new string[0]; 
        } 
    } 
 
    List<DialogueLine> lines; //cria lista para armazenar os dialogos (Talvez criar um bd depois);
 
    // Use this for initialization 
    void Start () { //Relaciona o arquivo do dialogo a cena, (enumerar as cenas para facilitar) 
        string file = "Assets/Data/Dialogue"; 
        string sceneNum = EditorApplication.currentScene; 
        sceneNum = Regex.Replace (sceneNum, "[^0-9]", ""); 
        file += sceneNum; 
        file += ".txt";
 
        lines = new List<DialogueLine>(); //armazenas os dialogos na lista
 
        LoadDialogue (file); 
    } 
 
    // Update is called once per frame 
    void Update () { 
 
    } 
 
    void LoadDialogue(string filename) { //recebe o arquivo do dialogo
        string line; 
        StreamReader r = new StreamReader (filename); //permite a leitura do arquivo 
 
        using (r) { 
            do { 
                line = r.ReadLine(); 
                if (line != null) { 
                    string[] lineData = line.Split(';'); //Faz a leitura da linha caso não seja vazia
                    if (lineData[0] == "Player") { 
                        DialogueLine lineEntry = new DialogueLine(lineData[0], "", 0, ""); 
                        lineEntry.options = new string[lineData.Length-1]; 
                        for (int i = 1; i < lineData.Length; i++) { 
                            lineEntry.options[i-1] = lineData[i]; //modifica a leitura para o player, ja que este nao aparecera na tela e tera nome costumizavel; 
                        } 
                        lines.Add(lineEntry); 
                    } else { 
                        DialogueLine lineEntry = new DialogueLine(lineData[0], lineData[1], int.Parse(lineData[2]), lineData[3]); //faz a leitura dos dados adicionados, nome do personagem, fala, pose do personagem, e posicao na tela
                        lines.Add(lineEntry); 
                    } 
                } 
            } 
            while (line != null); 
            r.Close(); //quando não tiver mais dialogos o stream reader fecha;
        } 
    } 
 
    public string GetPosition(int lineNumber) { 
        if (lineNumber < lines.Count) { 
            return lines[lineNumber].position; 
        } 
        return ""; 
    } //pega o dado da posicao no dialogo
 
    public string GetName(int lineNumber) { 
        if (lineNumber < lines.Count) { 
            return lines[lineNumber].name; 
        } 
        return ""; 
    } //pega o dado do nome do personagem no dialogo
 
    public string GetContent(int lineNumber) { 
        if (lineNumber < lines.Count) { 
            return lines[lineNumber].content; 
        } 
        return ""; 
    } //pega o dado da fala do personagem no dialogo
 
    public int GetPose(int lineNumber) { 
        if (lineNumber < lines.Count) { 
            return lines[lineNumber].pose; 
        } //pega o dado da pose do personagem no dialogo
        return 0; 
    } 
 